{"version":3,"sources":["App.js","useToggle.js","serviceWorker.js","index.js"],"names":["App","useState","volume","setVolume","focus","setFocus","color","active","type","setType","Tone","Noise","noise","setNoise","ref","useRef","white","pink","brown","useToggle","toggle","setToggle","setNoiseType","start","toMaster","onChange","e","current","target","value","dist","Filter","frequency","rolloff","Q","gain","handleKeyDown","event","onKeyDown","keyCode","Math","floor","state","setMute","changeFilter","connect","mute","press","console","log","useEffect","style","transition","tabIndex","Number","class","id","min","defaultValue","step","max","onFocus","onBlur","map","i","key","eval","className","onClick","initial","open","setOpen","useCallback","status","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc954482.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Tone from 'tone';\nimport './App.css';\nimport { useToggle } from './useToggle';\n\nfunction App() {\n  const [volume, setVolume] = useState(-20);\n  const [focus, setFocus] = useState('');\n\n  const [type, setType] = useState({ color: 'white', active: true });\n  const [noise, setNoise] = useState(\n    new Tone.Noise({\n      type,\n      volume: -20,\n    }),\n  );\n\n  const ref = useRef(null);\n  const white = useRef(null);\n  const pink = useRef(null);\n  const brown = useRef(null);\n\n  const [toggle, setToggle] = useToggle(true);\n\n  function setNoiseType(type) {\n    setType({ color: type.color, active: true });\n    noise.type = type.color;\n    noise.start().toMaster();\n  }\n\n  function onChange(e) {\n    ref.current.focus();\n    setVolume(e.target.value);\n    noise.volume.value = e.target.value;\n  }\n\n  var dist = new Tone.Filter({\n    type: 'lowpass',\n    frequency: 400,\n    rolloff: -12,\n    Q: 4,\n    gain: 1,\n  }).toMaster();\n\n  //play a middle 'C' for the duration of an 8th note\n\n  function handleKeyDown(event) {\n    // console.log(event.keyCode);\n    // if (event.keyCode === 65) {\n    //   noise.start();\n    // } else if (event.keyCode === 83) {\n    //   noise.connect(dist);\n    // } else if (event.keyCode === 76) {\n    // } else if (event.keyCode === 49) {\n    // } else if (event.keyCode === 50) {\n    // } else if (event.keyCode === 48) {\n    //   noise.volume.value = vol += 1;\n    // } else if (event.keyCode === 57) {\n    //   noise.volume.value = vol -= 1;\n    // } else if (event.keyCode === 32) {\n    //   noise.stop();\n    // }\n  }\n\n  function onKeyDown(event) {\n    if (event.keyCode === 48) {\n      setVolume(\n        Math.floor(\n          noise.volume.value <= 0\n            ? (noise.volume.value += 1)\n            : noise.volume.value,\n        ),\n      );\n    }\n    if (event.keyCode === 57) {\n      setVolume(\n        Math.floor(\n          noise.volume.value >= -99\n            ? (noise.volume.value -= 1)\n            : noise.volume.value,\n        ),\n      );\n    }\n    if (event.keyCode === 13 && noise.state === 'started') {\n      setMute();\n      setToggle();\n    } else {\n      setNoiseType(type);\n      setToggle();\n    }\n  }\n\n  useEffect(() => {}, [volume, noise, toggle]);\n\n  function changeFilter() {\n    noise.connect(dist);\n  }\n\n  function setMute() {\n    noise.mute = toggle;\n  }\n\n  function press(e) {\n    console.log(type);\n    console.log(e.keyCode);\n    if (e.keyCode === 56) {\n      ref.current.focus();\n    } else if (e.keyCode === 49) {\n      white.current.focus();\n      setNoiseType({ color: 'white', active: true });\n    } else if (e.keyCode === 50) {\n      pink.current.focus();\n      setNoiseType({ color: 'pink', active: true });\n    } else if (e.keyCode === 51) {\n      brown.current.focus();\n      setNoiseType({ color: 'brown', active: true });\n    }\n  }\n\n  return (\n    <div style={{ transition: '1s' }} tabIndex=\"0\" onKeyDown={e => press(e)}>\n      <h1>White Noise</h1>\n      <p>{Number(Math.floor(volume)) + 100}%</p>\n      {focus ? 'use 9-0' : 'no'}\n      <div class=\"slidecontainer\">\n        <input\n          ref={ref}\n          id={noise.mute ? 'volume' : 'volume-static'}\n          type=\"range\"\n          min=\"-100\"\n          defaultValue=\"-20\"\n          step=\"1\"\n          max=\"0\"\n          onChange={e => onChange(e)}\n          onKeyDown={e => onKeyDown(e)}\n          value={volume}\n          onFocus={() => setFocus(true)}\n          onBlur={() => setFocus(false)}\n        />\n      </div>\n      {[\n        { color: 'white', active: false },\n        { color: 'pink', active: false },\n        { color: 'brown', active: false },\n      ].map((color, i) => (\n        <button\n          key={i}\n          ref={eval(color.color)}\n          className={` button ${\n            color.color === type.color ? type.color : 'unselected'\n          }`}\n          onClick={() => {\n            ref.current.focus();\n            setNoiseType(color);\n          }}\n        >\n          {color.color}\n        </button>\n      ))}\n      <br></br>\n\n      {noise.state !== 'stopped' ? (\n        <button\n          className={` button ${type.color}`}\n          onClick={() => {\n            setToggle();\n            setMute();\n          }}\n        >\n          {!noise.mute && noise.state ? 'Stop' : 'Start'}\n        </button>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useCallback } from 'react';\nexport const useToggle = initial => {\n  const [open, setOpen] = useState(initial);\n\n  return [open, useCallback(() => setOpen(status => !status))];\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}